if (!has('nvim'))
    set autoindent
    set autoread
    set backspace="indent,eol,start"
    set belloff="all"
    set complete-=i
    set display="lastline,msgsep"
    set encoding=utf-8
    set fillchars="vert:│,fold:·,sep:│"
    set history=10000
    set hlsearch
    set incsearch
    set langnoremap
    set laststatus=2
    set nrformats="bin,hex"
    set showcmd
    set smarttab
    set ttyfast
    set wildmenu
else
    setglobal scrollback=-1
endif

function! LoadDir(path) abort
    for file in split(glob(a:path . "/*.vim"), '\n')
        exe 'source' file
    endfor
endfunction

" Declare the general config group for autocommand

call LoadDir("~/.vim/before")

" Initialize directories {
    function! InitializeDirectories() abort
        let dir_list = {
                    \ 'backup': 'backupdir',
                    \ 'views': 'viewdir' }

        if has('persistent_undo')
            let dir_list['undo'] = 'undodir'
        endif

        let common_dir = expand("~/.vim/")

        for [dirname, settingname] in items(dir_list)
            let directory = common_dir . dirname . '/'
            if exists("*mkdir")
                if !isdirectory(directory)
                    call mkdir(directory)
                endif
            endif
            if !isdirectory(directory)
                echo "Warning: Unable to create backup directory: " . directory
                echo "Try: mkdir -p " . directory
            else
                let directory = substitute(directory, " ", "\\\\ ", "g")
                exec "set " . settingname . "=" . directory
            endif
        endfor
    endfunction
    call InitializeDirectories()
"}

source ~/.vim/bundles.vim

" General {
    filetype plugin indent on   " Automatically detect file types.
    syntax on                   " Syntax highlighting
    scriptencoding utf-8
    set shortmess+=filmnrxoOtT          " Abbrev. of messages (avoids 'hit enter')
    set virtualedit=onemore             " Allow for cursor beyond last character
    set nospell                         " Spell checking off
    set hidden                          " Allow buffer switching without saving
    if has('clipboard')
        if has('unnamedplus')  " When possible use + register for copy-paste
            set clipboard=unnamedplus
        else         " On mac and Windows, use * register for copy-paste
            set clipboard=unnamed
        endif
    endif
    set noswapfile
    set ttimeout
    set ttimeoutlen=0
    set mouse="a"
	set shiftround

    " Setting up the directories {
        set backup                  " Backups are nice ...
        if has('persistent_undo')
            set undofile                " So is persistent undo ...
            set undolevels=1000         " Maximum number of changes that can be undone
            set undoreload=10000        " Maximum number lines to save for undo on a buffer reload
        endif
    " }
" }

" Vim UI {
    set tabpagemax=15               " Only show 15 tabs
    set showmode                    " Display the current mode
    set cursorline                  " Highlight current line
    set linespace=0                 " No extra spaces between rows
    set number                         " Line numbers on
    set showmatch                   " Show matching brackets/parenthesis
    set winminheight=0              " Windows can be 0 line high
    set ignorecase                  " Case insensitive search
    set smartcase                   " Case sensitive when uc present
    set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
    set scrolljump=5                " Lines to scroll when cursor leaves screen
    set scrolloff=3                 " Minimum lines to keep above and below cursor
    set list
    set listchars=tab:›\ ,trail:•,extends:#,nbsp:␣ " Highlight problematic whitespace
    set completeopt=noinsert,menuone,noselect " don't insert automatically, display even when there is only one option, don't select automatically
    set complete-=t

    set guifont=DroidSansMono\ Nerd\ Font\ 10
    colorscheme Tomorrow-Night
" }

" Formatting {
    set nowrap                      " Do not wrap long lines
    set shiftwidth=4                " Use indents of 4 spaces
    set expandtab                   " Tabs are spaces, not tabs
    set tabstop=4                   " An indentation every four columns
    set softtabstop=4               " Let backspace delete indent
    set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
    set splitright                  " Puts new vsplit windows to the right of the current
    set splitbelow                  " Puts new split windows to the bottom of the current
" }

" Folding {
    function! MyFoldText() abort " {{{
        let line = getline(v:foldstart)

        let nucolwidth = &fdc + &number * &numberwidth
        let windowwidth = winwidth(0) - nucolwidth - 3
        let foldedlinecount = v:foldend - v:foldstart

        let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
        let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
        return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
    endfunction " }}}
    set foldtext=MyFoldText()
" }

" Key (re)Mappings {
    nnoremap Y y$

    " better fold move commands
    nnoremap zk zk[z
    nnoremap zK zk
    nnoremap zJ zj]z

    " Visual shifting (does not exit Visual mode)
    vnoremap < <gv
    vnoremap > >gv

    " Allow using the repeat operator with a visual selection (!)
    " http://stackoverflow.com/a/8064607/127816
    vnoremap . :normal .<CR>

    " Some helpers to edit mode
    " http://vimcasts.org/e/14
    cnoremap %% <C-R>=expand('%:h').'/'<cr>

    " Disable arrows
    noremap  <up> <nop>
    noremap  <down> <nop>
    noremap  <left> <nop>
    noremap  <right> <nop>

    let mapleader = " "

    inoremap jj <Esc>

    nnoremap j gj
    nnoremap k gk

    " move easily through buffers
    nnoremap <C-h> :bp<cr>
    nnoremap <C-l> :bn<cr>

	"switch to test file
	nnoremap <C-t> :A<cr>

	"switch to previous file
	nnoremap <C-j> :b#<cr>

    "Edit vim config
    nnoremap <leader>ev :e ~/.vim/vimrc<cr>

    "Reloads vim config
    nnoremap <leader>sv :source $MYVIMRC<cr>

    "Alias to vim folder
    cnoremap %v <C-R>=expand('~/.vim/')<cr>

    "copy/paste from system clipboard
    vmap <Leader>y "+y
    vmap <Leader>d "+d
    nmap <Leader>p "+p
    nmap <Leader>P "+P
    vmap <Leader>p "+p
    vmap <Leader>P "+P

    "terminal mode escape
    tnoremap <Esc> <C-\><C-n>

	cnoremap vterm vsplit term://
	cnoremap sterm split term://

    nnoremap <Leader>taa :Test<CR>
    nnoremap <Leader>tas :Tests<CR>
    nnoremap <Leader>tav :Testv<CR>
" }

" Open Quickfix window when text is written in it {
    augroup quickfix
        autocmd!
        autocmd QuickFixCmdPost * call asyncrun#quickfix_toggle(8, 1)
    augroup END
" }

" Source every plugin configs {
    call LoadDir("~/.vim/pluginconf")
" }

" Normal Vim omni-completion {
augroup filetypes
  autocmd!
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
augroup END
" }
" length matters {
    let g:lengthmatters_start_at_column = 120
" }

cd `=expand($VIM_DEFAULT_FOLDER)`

call LoadDir("~/.vim/local")
